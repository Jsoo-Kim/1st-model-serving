# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qOP61cu52OswfCUxnwT_cB6sYZ5bBnBe
"""


# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Colab Notebooks/stdcode2024/Session_모델서빙/ModelServing_김지수/app

"""# 1. 라이브러리 선언"""

# !pip install uvicorn==0.29.0 fastapi==0.111.0 pandas==2.2.1 numpy==1.26.4 pydantic==2.7.1 scikit-learn==1.2.2


# fast api 라이브러리
from fastapi import FastAPI # 비동기 처리가 가능한 파이썬 웹서버 라이브라리

# 머신러닝 모델 관리용 라이브러리
import pickle # 특징: 데이터 타입을 유지하면서 데이터를 저장하고 불러올 수 있음, 대용량 데이터는 피클로 저장해서 불러와야 시간이 확 단축됨! 기계가 알아듣는 바이너리로 저장되기 때문

# 데이터프레임 및 수 처리 라이브러리
import pandas as pd # 데이터 행과 열 처리
import numpy as np # 데이터 수를 관리

# 인터페이스 데이터 관리를 위한 라이브러리
from pydantic import BaseModel # pydantic은 인터페이스 데이터를 쉽게 정의할 수 있는 라이브러리

# scikit-learn 버전 맞추기
with open("./ml.dump", "rb") as fr:
    loadedModel = pickle.load(fr)

app = FastAPI(title="ML API")

"""# 3. 인터페이스 정의"""

# features = ["input_road_rating", "input_maximum_speed_limit", "input_weight_restricted"]
# label = ["target"] (평균속도)

# 1. input_road_rating : 0(103) / 4(106) / 5(107)
# 2. input_maximum_speed_limit : 30 / 40 / 50 / 60 / 70 / 80
# 3. input_weight_restricted : 0(제한x) / 1(32400) / 5(43200) / 6(50000)


# inputData = pd.DataFrame( [[input_road_rating, input_maximum_speed_limit, input_weight_restricted]] )
# inputData

class InDataset(BaseModel):
    input_road_rating: int
    input_maximum_speed_limit: int
    input_weight_restricted: int

"""# 4. 라우터 정의"""

@app.get("/")
async def root():
    return {"message": "hello server is running"}

@app.post("/predict", status_code=200)
async def predict_ml(x: InDataset): # 들어오는 데이터 타입을 InDataSet으로
    print(x)
    testDf = pd.DataFrame( [[x.input_road_rating, x.input_maximum_speed_limit, x.input_weight_restricted]] )
    predictValue = loadedModel.predict(testDf)[0]
    interfaceResult = {"result": predictValue }
    return interfaceResult